/* Generated By:JJTree&JavaCC: Do not edit this line. BafParserConstants.java */
// Near Infinity - An Infinity Engine Browser and Editor
// Copyright (C) 2001 Jon Olav Hauglid
// See LICENSE.txt for license information

package org.infinity.resource.bcs.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BafParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int THEN = 11;
  /** RegularExpression Id. */
  int RESPONSE = 12;
  /** RegularExpression Id. */
  int END = 13;
  /** RegularExpression Id. */
  int NUMBER_LITERAL = 14;
  /** RegularExpression Id. */
  int DEC_LITERAL = 15;
  /** RegularExpression Id. */
  int HEX_LITERAL = 16;
  /** RegularExpression Id. */
  int BIN_LITERAL = 17;
  /** RegularExpression Id. */
  int STRING_LITERAL = 18;
  /** RegularExpression Id. */
  int STRING_QUOTE = 19;
  /** RegularExpression Id. */
  int STRING_PERCENT = 20;
  /** RegularExpression Id. */
  int STRING_POUND = 21;
  /** RegularExpression Id. */
  int STRING_TILDE = 22;
  /** RegularExpression Id. */
  int STRING_MULTI_TILDE = 23;
  /** RegularExpression Id. */
  int IDENTIFIER = 24;
  /** RegularExpression Id. */
  int IDENTIFIER_ESCAPED = 25;
  /** RegularExpression Id. */
  int LETTER = 26;
  /** RegularExpression Id. */
  int SPECIAL_LETTER = 27;
  /** RegularExpression Id. */
  int DIGIT = 28;
  /** RegularExpression Id. */
  int LPAREN = 29;
  /** RegularExpression Id. */
  int RPAREN = 30;
  /** RegularExpression Id. */
  int LBRACKET = 31;
  /** RegularExpression Id. */
  int RBRACKET = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int BANG = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int MINUS = 37;
  /** RegularExpression Id. */
  int PLUS = 38;
  /** RegularExpression Id. */
  int POUND = 39;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 9>",
    "\"IF\"",
    "\"THEN\"",
    "\"RESPONSE\"",
    "\"END\"",
    "<NUMBER_LITERAL>",
    "<DEC_LITERAL>",
    "<HEX_LITERAL>",
    "<BIN_LITERAL>",
    "<STRING_LITERAL>",
    "<STRING_QUOTE>",
    "<STRING_PERCENT>",
    "<STRING_POUND>",
    "<STRING_TILDE>",
    "<STRING_MULTI_TILDE>",
    "<IDENTIFIER>",
    "<IDENTIFIER_ESCAPED>",
    "<LETTER>",
    "<SPECIAL_LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "\"!\"",
    "\"|\"",
    "\"-\"",
    "\"+\"",
    "\"#\"",
  };

}
